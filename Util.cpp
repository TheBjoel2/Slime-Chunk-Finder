#include "GlobalSeedMatrix.cpp"
#include "JavaRandom.cpp"

namespace Util
{

/*We only work with matrix, that's why matrix X and Z*/
bool isSlimeChunk(const GlobalSeedMatrix& matrix, const uint32_t matrixX, const uint32_t matrixZ)
{
    const uint32_t randValue = JavaRandom::nextIntForSeed(matrix.getSeedValue(matrixX, matrixZ), 10);
    return (randValue == 0);
}

uint32_t getChunkScore(const uint32_t x, const uint32_t z)
{
    const uint32_t matrix[16][16] =
    {
        {   0,    0,    0,    0,  755, 3681, 5795, 6834, 6834, 5795, 3681,  755,    0,    0,    0,    0},
        {   0,    0,    0, 3588, 7552, 7936, 7936, 7936, 7936, 7936, 7936, 7552, 3588,    0,    0,    0},
        {   0,    0, 4828, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 4828,    0,    0},
        {   0, 3588, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 3588,    0},
        { 755, 7552, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7552,  755},
        {3681, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 3681},
        {5795, 7936, 7936, 7936, 7936, 7936, 7936, 7081, 7081, 7936, 7936, 7936, 7936, 7936, 7936, 5795},
        {6834, 7936, 7936, 7936, 7936, 7936, 7081, 3078, 3078, 7081, 7936, 7936, 7936, 7936, 7936, 6834},
        {6834, 7936, 7936, 7936, 7936, 7936, 7081, 3078, 3078, 7081, 7936, 7936, 7936, 7936, 7936, 6834},
        {5795, 7936, 7936, 7936, 7936, 7936, 7936, 7081, 7081, 7936, 7936, 7936, 7936, 7936, 7936, 5795},
        {3681, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 3681},
        { 755, 7552, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7552,  755},
        {   0, 3588, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 3588,    0},
        {   0,    0, 4828, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 4828,    0,    0},
        {   0,    0,    0, 3588, 7552, 7936, 7936, 7936, 7936, 7936, 7936, 7552, 3588,    0,    0,    0},
        {   0,    0,    0,    0,  755, 3681, 5795, 6834, 6834, 5795, 3681,  755,    0,    0,    0,    0},
    };
    return matrix[z][x];
}

bool isChunkWithinSphere(const uint32_t x, const uint32_t z)
{
    const uint32_t matrix[16][16] =
    {
        {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
        {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
        {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
        {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
        {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
        {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
        {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
    };
    return matrix[z][x];
}

}
